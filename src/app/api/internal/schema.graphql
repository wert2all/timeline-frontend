"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(
  if: Boolean = true
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type Account {
  avatar: String
  id: Int!
  name: String
  settings: [AccountSettings!]!
}

input AccountSettingInput {
  key: String!
  value: String
}

type AccountSettings {
  key: String!
  value: String!
}

input AddTimeline {
  accountId: Int!
  name: String
}

input ExistTimelineEventInput {
  date: Time!
  description: String
  id: Int!
  previewlyImageId: Int
  showTime: Boolean
  tags: [String!]
  timelineId: Int!
  title: String
  type: TimelineType
  url: String
}

input Limit {
  from: Int
  to: Int
}

type Mutation {
  addEvent(event: TimelineEventInput!): TimelineEvent!
  addTimeline(timeline: AddTimeline): ShortTimeline!
  authorize: User
  deleteEvent(eventId: Int!): Status!
  editEvent(event: ExistTimelineEventInput!): TimelineEvent!
  saveAccount(account: SaveAccountInput!, accountId: Int!): ShortAccount!
  saveSettings(accountId: Int!, settings: [AccountSettingInput]): Status!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  startCursor: String
}

type Query {
  myAccountTimelines(accountId: Int!): [ShortTimeline!]!
  timelineCursorEvents(
    accountId: Int!
    cursor: String
    limit: Limit
    timelineId: Int!
  ): TimelineEvents!
  timelineEvents(limit: Limit, timelineId: Int!): [TimelineEvent!]!
}

input SaveAccountInput {
  avatarID: Int
  name: String!
}

type ShortAccount {
  avatar: String
  id: Int!
  name: String
  previewlyToken: String!
  settings: [AccountSettings!]!
}

type ShortTimeline {
  id: Int!
  name: String
}

enum Status {
  error
  success
}

scalar Time

type TimelineEvent {
  date: Time!
  description: String
  id: Int!
  previewlyImageId: Int
  showTime: Boolean
  tags: [String!]!
  title: String
  type: TimelineType!
  url: String
}

input TimelineEventInput {
  date: Time!
  description: String
  id: Int
  previewlyImageId: Int
  showTime: Boolean
  tags: [String!]
  timelineId: Int!
  title: String
  type: TimelineType
  url: String
}

type TimelineEvents {
  events: [TimelineEvent!]!
  page: PageInfo!
}

enum TimelineType {
  default
  selebrate
}

type User {
  accounts: [ShortAccount]!
  avatar: String
  email: String!
  id: Int!
  isNew: Boolean!
  name: String
}
