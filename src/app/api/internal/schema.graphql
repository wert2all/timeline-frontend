"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """
  Deferred when true or undefined.
  """
  if: Boolean = true

  """
  Unique name
  """
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

input AccountSettingInput {
  key: String!
  value: String
}

type AccountSettings {
  key: String!
  value: String!
}

input AddTimeline {
  accountId: Int!
  name: String
}

input ExistTimelineEventInput {
  date: Time!
  description: String
  id: Int!
  previewlyImageId: Int
  showTime: Boolean
  tags: [String!]
  timelineId: Int!
  title: String
  type: TimelineType
  url: String
}

input Limit {
  from: Int
  to: Int
}

type Mutation {
  addAccount(name: String!): ShortAccount!
  addEvent(event: TimelineEventInput!): TimelineEvent!
  addTimeline(timeline: AddTimeline): ShortTimeline!
  authorize: User
  deleteEvent(eventId: Int!): Status!
  editEvent(event: ExistTimelineEventInput!): TimelineEvent!
  saveAccount(account: SaveAccountInput!, accountId: Int!): ShortAccount!
  saveSettings(accountId: Int!, settings: [AccountSettingInput]): Status!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  startCursor: String
}

type Query {
  event(accountId: Int, eventId: Int!): TimelineEvent
  myAccountTimelines(accountId: Int!): [ShortTimeline!]!
  timeline(timelineId: Int!): Timeline
  timelineCursorEvents(
    accountId: Int
    cursor: String
    limit: Limit
    timelineId: Int!
  ): TimelineEvents!
}

input SaveAccountInput {
  about: String
  avatarID: Int
  name: String!
}

type ShortAccount {
  about: String
  avatarId: Int
  id: Int!
  name: String
  previewlyToken: String!
  settings: [AccountSettings!]!
}

type ShortTimeline {
  id: Int!
  name: String
}

enum Status {
  error
  success
}

scalar Time

type Timeline {
  account: ShortAccount!
  id: Int!
  name: String
}

type TimelineEvent {
  date: Time!
  description: String
  id: Int!
  previewlyImageId: Int
  showTime: Boolean
  tags: [String!]!
  timelineId: Int!
  title: String
  type: TimelineType!
  url: String
}

input TimelineEventInput {
  date: Time!
  description: String
  id: Int
  previewlyImageId: Int
  showTime: Boolean
  tags: [String!]
  timelineId: Int!
  title: String
  type: TimelineType
  url: String
}

type TimelineEvents {
  events: [TimelineEvent!]!
  page: PageInfo!
}

enum TimelineType {
  default
  selebrate
}

type User {
  accounts: [ShortAccount]!
  email: String!
  id: Int!
  isNew: Boolean!
  name: String
}
